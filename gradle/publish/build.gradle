apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: "de.marcphilipp.nexus-publish"

publishing {
    publications {
        release(MavenPublication) {
            groupId = group
            artifactId = project.name
            version = version

            artifact("$buildDir/outputs/aar/${project.name}-release.aar")
            pom {
                name = project.name
                description.set(project.provider({ project.description }))
                url = 'https://web3j.io'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                scm {
                    def slug = rootProject.name
                    if (project.hasProperty('rootProjectOverride')) {
                        slug = project.rootProjectOverride
                    }

                    url = "https://github.com/hyperledger-web3j/$slug"
                    connection = "scm:https://github.com/hyperledger-web3j/${slug}.git"
                    developerConnection = "scm:git://github.com/hyperledger-web3j/${slug}.git"
                }

                developers {
                    developer {
                        id = 'conor10'
                        name = 'Conor Svensson'
                        email = 'conor10@gmail.com'
                    }
                }
            }
        }
    }
//        repositories {
//            mavenLocal()
//        }
}

nexusPublishing {
    repositories {
        sonatype {
            username = System.getenv('OSSRH_USERNAME')
            password = System.getenv('OSSRH_PASSWORD')
        }
    }
}


nexusStaging {
    username System.getenv('OSSRH_USERNAME')
    password System.getenv('OSSRH_PASSWORD')
    packageGroup = rootProject.group
}

afterEvaluate {
    tasks.withType(PublishToMavenRepository).configureEach {
        dependsOn('bundleReleaseAar')
    }
}


tasks.named('publish') {
    dependsOn('assembleRelease')
}

signing {
    sign publishing.publications.release
    def gpgSecretKey = System.getenv('OSSRH_GPG_SECRET_KEY')
    def password = System.getenv('OSSRH_GPG_SECRET_KEY_PASSWORD')
    useInMemoryPgpKeys(gpgSecretKey, password)
}

tasks.named('signReleasePublication') {
    dependsOn('bundleReleaseAar')
}

